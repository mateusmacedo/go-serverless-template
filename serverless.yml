service: go-serverless-template

plugins:
  - serverless-localstack
  - serverless-go-plugin

custom:
  serviceName: go-serverless-template
  stage: ${opt:stage, 'local'}
  region: us-east-1
  helloQueueName: ${self:custom.serviceName}-${self:custom.stage}-hello-queue
  helloSecondaryQueueName: ${self:custom.serviceName}-${self:custom.stage}-hello-secondary-queue
  helloTopicName: ${self:custom.serviceName}-${self:custom.stage}-hello-topic
  helloTableName: ${self:custom.serviceName}-${self:custom.stage}-hello-table

  localstack:
    stages:
      - local
    autostart: true
    lambda:
      mount_code: true
    debug: true

  go:
    supportedRuntimes: ["provided.al2"]
    buildProvidedRuntimeAsBootstrap: true

provider:
  name: aws
  region: ${self:custom.region}
  stage: ${self:custom.stage}
  apiName: ${self:custom.serviceName}-${self:provider.stage}
  environment:
    SNS_TOPIC: {"Ref": "HelloTopic"}
    DYNAMODB_TABLE: ${self:custom.helloTableName}
  memorySize: 128
  apiGateway:
    shouldStartNameWithService: true
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "sqs:SendMessage"
            - "sqs:ReceiveMessage"
            - "sqs:DeleteMessage"
          Resource:
            - {"Fn::GetAtt": ["HelloQueue", "Arn"]}
            - {"Fn::GetAtt": ["HelloSecondaryQueue", "Arn"]}
        - Effect: "Allow"
          Action:
            - "sns:Publish"
          Resource: {"Ref": "HelloTopic"}
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:GetItem"
            - "dynamodb:Query"
          Resource: {"Fn::GetAtt": ["HelloTable", "Arn"]}
  logs:
    restApi:
      executionLogging: true
      level: INFO
      fullExecutionData: true
    httpApi:
      accessLogging: true
      executionLogging: true
    frameworks:
      lambda:
        level: INFO

resources:
  Resources:
    HelloQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.helloQueueName}

    HelloSecondaryQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.helloSecondaryQueueName}

    HelloTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: ${self:custom.helloTopicName}
        TopicName: ${self:custom.helloTopicName}

    HelloSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        TopicArn: {"Ref": "HelloTopic"}
        Endpoint: {"Fn::GetAtt": ["HelloQueue", "Arn"]}

    HelloSecondarySubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: sqs
        TopicArn: {"Ref": "HelloTopic"}
        Endpoint: {"Fn::GetAtt": ["HelloSecondaryQueue", "Arn"]}

    HelloTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.helloTableName}

functions:
  helloHttp:
    handler: cmd/hello/http-adapter/main.go
    runtime: provided.al2
    environment:
      SNS_TOPIC: ${self:provider.environment.SNS_TOPIC}
    events:
      - http:
          path: hello/{name}
          method: get
          cors: true
          request:
            parameters:
              paths:
                name: true

  helloPrimary:
    handler: cmd/hello/primary-sqs-adapter/main.go
    runtime: provided.al2
    events:
      - sqs:
          arn: {"Fn::GetAtt": ["HelloQueue", "Arn"]}

  helloSecondary:
    handler: cmd/hello/secondary-sqs-adapter/main.go
    runtime: provided.al2
    events:
      - sqs:
          arn: {"Fn::GetAtt": ["HelloSecondaryQueue", "Arn"]}

outputs:
  helloQueueUrl:
    Value:
      Ref: HelloQueue
  helloSecondaryQueueUrl:
    Value:
      Ref: HelloSecondaryQueue
  helloTopicArn:
    Value:
      Ref: HelloTopic
  helloTableArn:
    Value:
      Fn::GetAtt:
        - HelloTable
        - Arn
